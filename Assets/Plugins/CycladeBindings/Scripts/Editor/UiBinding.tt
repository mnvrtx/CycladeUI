<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CycladeBindings.Models" #>
<#@ import namespace="CycladeBindingsEditor" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using CycladeBase.Utils;
using CycladeBindings.UIStateSystem;
using CycladeBindings.UIStateSystem.Base;

namespace GeneratedCycladeBindings
{
    public class <#= ClassName #> : MonoBehaviour
    {

        public object UserData;
<#
    if (ButtonMethodInfos.Count > 0)
    {
#>
        public interface IButtonsHandler
        {
<#
    foreach (var methodInfo in ButtonMethodInfos)
    {
#>
<#
        if (methodInfo.IsArray)
        {
#>
            void On<#=methodInfo.FieldName#>Click(int btnIndex);
<#
        }
        else
        {
#>
            void On<#=methodInfo.FieldName#>Click();
<#
        }
#>
<#
    }
#>
        }

<#
    }
#>
<#
    string ToPrivateName(string s, bool needUnderlining = true) => $"{(needUnderlining ? "_" : "")}{s.Substring(0, 1).ToLower()}{s.Substring(1, s.Length - 1)}";
    string SmartComma(int i, int count) => i < count - 1 ? ", " : "";

    foreach (var statesGroup in StateGroups)
    {
#>
        public enum <#=statesGroup.name#>
        {
<#
    foreach (var state in statesGroup.states)
    {
#>
            <#=state#>,
<#
    }
#>
        }

<#
    }
#>
<#
    foreach (var field in Fields)
    {
#>
        public <#=field.Type#> <#=field.Name#>;
<#
    }
#>
<#
    if (ButtonMethodInfos.Count > 0)
    {
#>
        public IButtonsHandler Handler;

<#
    foreach (var methodInfo0 in ButtonMethodInfos)
    {
#>
<#
        if (methodInfo0.IsArray)
        {
#>
        public Action<int> On<#=methodInfo0.FieldName#>Click;

<#
        }
        else
        {
#>
        public Action On<#=methodInfo0.FieldName#>Click;

<#
        }
#>
<#
    }
#> 

        private void Awake()
        {
<#
    foreach (var methodInfo in ButtonMethodInfos)
    {
#>
<#
        if (methodInfo.IsArray)
        {
#>
            for (int i = 0; i < <#=methodInfo.FieldName#>.Count; i++)
            {
                var savedIdx = i;
                <#=methodInfo.FieldName#>[savedIdx].onClick.AddListener(() =>
                {
                    Handler?.On<#=methodInfo.FieldName#>Click(savedIdx);
                    On<#=methodInfo.FieldName#>Click?.Invoke(savedIdx);
                });
            }

<#
        }
        else
        {
#>
            <#=methodInfo.FieldName#>.onClick.AddListener(() =>
            {
                Handler?.On<#=methodInfo.FieldName#>Click();
                On<#=methodInfo.FieldName#>Click?.Invoke();
            });

<#
        }
#>
<#
    }
#>
        }
<#
    }
#> 
<#
    if (StateGroups.Count > 0)
    {
#> 
        public List<BaseStatefulElement> statefulElements;

<#
    foreach (var statesGroup in StateGroups)
    {
#>
        public <#=statesGroup.name#> Current<#=statesGroup.name#> => <#=ToPrivateName(statesGroup.name)#>;
        private <#=statesGroup.name#> <#=ToPrivateName(statesGroup.name)#> = default;
<#
    }
#>

<#
    if (StateGroups.Count > 1)
    {
#> 
        public void SetState(<#
        for (int i = 0; i < StateGroups.Count; i++)
        {
            var groupName = StateGroups[i].name;
    #><#=groupName#> <#=ToPrivateName(groupName, false)#><#=SmartComma(i, StateGroups.Count)#><#
        }#>)
        {
<#
    foreach (var statesGroup in StateGroups)
    {
#>
            <#=ToPrivateName(statesGroup.name)#> = <#=ToPrivateName(statesGroup.name, false)#>;
<#
    }
#>
            UpdateElements();
        }

<#
    }
#>

<#
    foreach (var statesGroup in StateGroups)
    {
#>
        public void SetState(<#=statesGroup.name#> <#=ToPrivateName(statesGroup.name, false)#>)
        {
            if (<#=ToPrivateName(statesGroup.name)#> == <#=ToPrivateName(statesGroup.name, false)#>)
                return;
            <#=ToPrivateName(statesGroup.name)#> = <#=ToPrivateName(statesGroup.name, false)#>;
            UpdateElements();
        }

<#
    }
#>
        private void UpdateElements()
        {
            UIStateSystemHelper.SetState(new Enum[]
            {
<#
    for (int i = 0; i < StateGroups.Count; i++)
    {
        var groupName = StateGroups[i].name;
#>
                <#=ToPrivateName(groupName)#><#=SmartComma(i, StateGroups.Count)#>
<#
    }
#>
            }, statefulElements);
        }
<#
    }
#>
    }
}
<#+
    public string ClassName;
    public List<BindingFieldInfo> Fields;
    public List<StatesGroup> StateGroups;
    public List<ButtonMethodInfo> ButtonMethodInfos;
#>
